#include <SoftwareSerial.h>
int data; //integer variable for storing data from sensor 1
int data1; //integer variable for storing data from sensor 2
boolean lock=true;
int counter=0; //counts the number of persons
int light_status=10; //light status

SoftwareSerial esp8266(3,4) //RX=3,TX=4
#define ssid "FILL_IN_YOUR_SSID"
#define pass "FILL_IN_YOUR_PASSWORD"

string sendAT(string command, const int timeout) //since sendAT function has to return response from ESP 8266 it reurns string type
{
  string response=" ";
  esp8266.print(command); //sends AT Commands to the serial communication object esp8266
  unsigned long int time = millis(); //Returns the number of milliseconds passed since the Arduino began running the program.
  while ((time + timeout)>millis())
  {
    while (esp8266.available())
    {
      char c=esp8266.read();
      response+=c;
    }
  }
  Serial.print(response);
  return response; //the response by esp8266 is given as an output
}

void connectWiFi() //establishes connection between Wi-Fi and esp8266
{
  sendAT("AT\r\n",1000);
  sendAT("AT+CWMODE=1\r\n",1000); //call sendAT function to set esp8266 to station mode
  sendAT("AT+CWJAP=\""ssid"\",\""pass"\"\r\n",1000);  //AT Command to connect with the Wi-Fi network
  while (!esp8266.find("OK"))
  {
    
  }
  sendAT("AT+CIFSR\r\n",1000); //AT Coomand to print IP address on serial monitor
  sendAT("AT+CIPMUX=0\r\n",1000); //AT Command to set esp8266 to single mode connection
}

void setup() {
  esp8266.begin(9600); //begin software serial communication with a baud rate of 9600
  Serial.begin(9600);
  sendAT("AT+RST\r\n",2000); //call sendAT function to send reset command
  connectWiFi(); //Function to connect esp8266 to Wi-Fi
  pinMode(10, INPUT); //sensor pin
  pinMode(11, INPUT); //sensor pin
  pinMode(8, OUTPUT); //light bulb connection
  pinMode(13, OUTPUT); //onboard LED
  pinMode(12, OUTPUT); //buzzer connection
  Serial.println("Calibrating sensors");
  for(int i=0;i<=30;i++)
  {
    Serial.print(".");
    delay(1000);
  }
  Serial.println("done");
  Serial.println("Sensor active");
  digitalWrite(13, HIGH);
  digitalWrite(12, HIGH);
  delay(2000);
  digitalWrite(12, LOW);
  delay(50);
}

void loop() {
  data=digitalRead(10);
  data1=digitalRead(11);
  if (data=HIGH && lock=true)
  {
    lock=false;
    digitalWrite(12, HIGH);
    delay(500);
    digitalWrite(12, LOW);
    Serial.print("Sensor IN");
    counter++;
    if (counter>0){
      digitalWrite(8, HIGH);
      light_status=100;
      passTS(counter, light_status); //function to send the counter and light_status to thingspeak
    }
    delay(4000);
    lock=true;
  }
  if (data1=HIGH && lock=true)
  {
    lock=false;
    digitalWrite(12, HIGH);
    delay(500);
    digitalWrite(12, LOW);
    Serial.print("Sensor OUT");
    counter--;
    if (counter==0){
      digitalWrite(8, LOW);
      light_status=10;
      passTS(counter, light_status);
    }
    delay(4000);
    lock=true;
  }
}

void passTS(int c, int l)
{
  string counter1= string(c); //convert integer variable to string type
  Serial.print("Number of persons: ");
  Serial.println(c);
  
  string light_status1= string(l); //convert integer variable to string type
  Serial.print("Light status: ");
  Serial.println(l);
  updateTS(counter1, light_status1)
  delay(3000);
}

void updateTS(string C, string L)
{
  Serial.print(" ");
  sendAT("AT+CIPSTART=\"TCP\",\"api.thingspeak.com\"80\r\n",1000);
  delay 2000;
  string cmdlen;
  string cmd="GET/update?key=*******&field1="+C+"&field2="+L+"\r\n";
  cmdlen=cmd.length(); //length should be less than 2024 bytes
  sendAT("AT+CIPSEND="+cmdlen+"\r\n",2000);
  esp8266.print(cmd);
  Serial.println(" ");
  sendAT("AT+CIPCLOSE\r\n",2000);
  serial.println("");
  delay(2000)
}